name: Security Scan

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/**'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_ENV: development

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # NPM Audit
      - name: Run NPM security audit
        run: |
          npm audit --json > npm-audit.json || true
          echo "NPM audit completed. See npm-audit.json for details."
        continue-on-error: true

      # Dependency scanning
      - name: Check dependencies with GitGuardian
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      # Static analysis
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript compiler
        run: npm run type-check
        continue-on-error: true

      # Dependency review
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      # OWASP ZAP Scan
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://api.company.com/webhook'  # Replace with your API endpoint
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      # Create final report
      - name: Create Security Report
        if: always()
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Results" >> security-report.md
          
          echo "### CodeQL Analysis" >> security-report.md
          echo "See Security tab for detailed results" >> security-report.md
          
          echo "### NPM Audit" >> security-report.md
          if [ -f npm-audit.json ]; then
            cat npm-audit.json >> security-report.md
          else
            echo "No NPM audit results found" >> security-report.md
          fi
          
          echo "### ZAP Scan" >> security-report.md
          if [ -f zap-report.html ]; then
            echo "See zap-report.html for detailed results" >> security-report.md
          else
            echo "No ZAP scan results found" >> security-report.md
          fi

      # Upload reports
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            security-report.md
            npm-audit.json
            zap-report.html
          retention-days: 30

      # Notify on failure
      - name: Notify Security Team
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Scan Failed',
              body: 'Security scan detected issues. Please review the security reports.',
              labels: ['security', 'high-priority']
            });

      # Mark scan status
      - name: Security Scan Status
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Security scan passed"
          else
            echo "‚ùå Security scan failed"
            exit 1
          fi